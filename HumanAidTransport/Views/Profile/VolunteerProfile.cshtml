@model Volunteer


@if (TempData["Error"] != null)
{
    <div class="alert alert-danger custom-alert">
        @TempData["Error"]
    </div>
}

@if (TempData["SuccessVol"] != null)
{
    <div class="alert alert-success custom-alert">
        @TempData["SuccessVol"]
    </div>
}

@if (TempData["DeleteMess"] != null){
    <div class="alert alert-success custom-alert">
        @TempData["DeleteMess"]
    </div>
}

@if (TempData["CanceledMess"] != null)
{
    <div class="alert alert-success custom-alert">
        @TempData["CanceledMess"]
    </div>
}

<div class="profile-container">
    <div class="profile-sidebar">
        <div class="profile-pic-container">

            <img src="@Model.ProfilePhotoURL" alt="Profile photo" class="profile-pic" id="profilePic">
            <input type="file" id="uploadPic" hidden>
            <label for="uploadPic" class="upload-btn">Change photo</label>
        </div>
        <h2 class="clientname">@Model.Name</h2>
        <p class="role">Volunteer</p>
        <div class="sidebar-buttons">
            <form id="requestForm" method="get" asp-controller="VolunProfile" asp-action="VolunteerRequestList">
                <input type="hidden" name="volunteerId" value="@Model.Id" />
                <button type="submit" class="request-icon">
                    <img src="~/images/requests.png" alt="Requests">
                </button>
                <p class="request-label">Your requests</p>
            </form>
            <form id="notificationForm" method="get" asp-controller="Notification" asp-action="VolunteerNotifications">
                <input type="hidden" name="volunteerId" value="@Model.Id" />
                <button type="submit" class="notif-icon">
                    <img src="~/images/notifications.png" alt="Notifications">
                </button>
                <p class="notif-label">Notifications</p>
            </form>
            <form id="logoutForm" method="post" asp-controller="VolunProfile" asp-action="LogOut">
                <button type="submit" class="logout-icon">
                    <img src="~/images/logout.png" alt="Logout">
                </button>
                <p class="logout-label">Log out </p>
            </form>

        </div>
    </div>
    <div class="profile-content">
        <div class="task-section">
            <h3 class="paragtask">Your Tasks</h3>

            <!-- Search Filters -->
            <div class="search-filters">
                <input type="text" id="taskNameSearch" placeholder="Search by Task Name" oninput="filterTasks()">
                <select id="taskStatusSearch" onchange="filterTasks()">
                    <option value="">All Statuses</option>
                    <option value="New">New</option>
                    <option value="Confirmed">Confirmed</option>
                    <option value="Canceled">Canceled</option>
                    <option value="Pending">Pending</option>
                    <option value="Completed">Completed</option>
                    <option value="In progress">In progress</option>
                    <option value="Rejected">Rejected</option>
                </select>
            </div>

            <div class="task-scroll-container">
                <ul class="task-list" id="taskList">
                    @foreach (var task in Model.Tasks)
                    {
                        <li class="task-item
                    @((task.Status == "New") ? "task-new" :
                    (task.Status == "Confirmed" ? "task-confirmed" :
                    (task.Status == "Canceled" ? "task-canceled" :
                    (task.Status == "Pending" ? "task-pending" :
                    (task.Status == "Completed" ? "task-completed" :
                    (task.Status == "In progress" ? "task-progress":
                    (task.Status == "Rejected" ? "task-rejected" : "")))))))" data-name="@task.Name" data-status="@task.Status">
                            <strong>@task.Name</strong><br>
                            Description: @task.Description <br>
                            Quantity: @task.Quantity <br>
                            From: @task.DeliveryAddressFrom <br>
                            To: @task.DeliveryAddressTo <br>
                            Payment: @task.Payment$ <br>
                            Expected Delivery: @task.ExpectedDeliveryTime <br>

                            Status:
                            <span class="status-label
                    @((task.Status == "New") ? "status-new" :
                    (task.Status == "Confirmed") ? "status-confirmed" :
                    (task.Status == "Canceled" ? "status-canceled" :
                    (task.Status == "Pending") ? "status-pending" :
                    (task.Status == "Completed" ? "status-completed" :
                    (task.Status == "In progress" ? "status-progress":
                    (task.Status == "Rejected" ? "status-rejected" : "")))))">
                                @task.Status
                            </span>

                            @if (task.Status == "Canceled" || task.Status == "Rejected")
                            {
                                <form method="post" asp-action="RestoreTask" asp-route-taskId="@task.HumanAidId" style="display:inline;">
                                    <button type="submit" class="btn-restore">Restore Task</button>
                                </form>
                            }

                            @if (task.Status != "Completed" && task.Status != "Rejected")
                            {
                                <form method="post" asp-action="CancelTask" asp-route-taskId="@task.HumanAidId" style="display:inline;">
                                    <button type="submit" class="btn-danger">Cancel Task</button>
                                </form>
                            }
                            <form method="post" asp-action="DeleteTask" asp-route-taskId="@task.HumanAidId" style="display:inline;">
                                <button type="submit" class="btn-delete" title="Delete Task">🗑️</button>
                            </form>
                        </li>
                    }
                </ul>
            </div>
            <button class="btn-primary" onclick="openModal()">Add Task</button>
        </div>
    </div>
    </div>
</div>

<div id="taskModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2> New Task</h2>
        <form id="taskForm" method="post" asp-action="PostTask">
            <div class="form-group">
                <label>Name:</label>
                <input type="text" name="Name" required>
                <label>Description:</label>
                <textarea name="Description" rows="3"></textarea>
                <label>Quantity:</label>
                <input type="number" name="Quantity" min="1" required>
                <label>Delivery From:</label>
                <input type="text" name="DeliveryAddressFrom" required>
                <label>Delivery To:</label>
                <input type="text" name="DeliveryAddressTo" required>
                <label>Payment($):</label>
                <input type="number" name="Payment" min="0">
                <label>Expected Delivery Time:</label>
                <input type="datetime-local" name="ExpectedDeliveryTime">
            </div>
            <button type="submit" class="btn-primary">Submit</button>
        </form>
    </div>
</div>

<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #ecf0f1;
        color: #333;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .profile-container {
        display: flex;
        flex: 1;
        width: 100%;
        height: 100%;
        background: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .profile-sidebar {
        width: 300px;
        background: #f9f9f9;
        color: #333;
        padding: 20px;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .profile-pic-container {
        margin-bottom: 20px;
        position: relative;
    }

    .profile-pic {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid #3498db;
    }

    .upload-btn {
        display: inline-block;
        margin-top: 10px;
        padding: 8px 18px;
        background: #3498db;
        color: #fff;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        transition: background 0.3s;
    }

        .upload-btn:hover {
            background: #2980b9;
        }

    .sidebar-buttons {
        margin-top: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        width: 100%;
    }

    .request-icon,.notif-icon, .logout-icon {
        background: none;
        border: none;
        cursor: pointer;
        padding: 10px;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .request-icon img {
            width: 50px;
            height: 50px;
            transition: transform 0.3s;
        }

        .notif-icon img {
            margin-top: 7px;
            width: 60px;
            height: 60px;
            margin-right: 10px;
            transition: transform 0.3s;
        }

        .logout-icon img {
            margin-top: -10px;
            width: 60px;
            height: 60px;
            transition: transform 0.3s;
            margin-left:8px;
        }

        .request-icon img:hover, .notif-icon img:hover, .logout-icon img:hover {
            transform: scale(1.2);
        }
  
    .profile-content {
        flex: 1;
        padding: 25px;
        background: #fff;
        overflow-y: auto;
    }

    .task-section {
        margin-bottom: 20px;
    }

    .task-scroll-container {
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 20px;
    }

    .task-list {
        list-style: none;
        padding: 0;
    }

    .task-item {
        background: #f9f9f9;
        padding: 12px;
        margin-bottom: 12px;
        border-radius: 6px;
        border: 1px solid #ddd;
        transition: background 0.3s;
    }

        .task-item:hover {
            background: #ecf0f1;
        }

    .btn-primary {
        background: #3498db;
        color: #fff;
        border: none;
        padding: 12px 24px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: background 0.3s;
    }

        .btn-primary:hover {
            background: #2980b9;
        }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 30px;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        text-align: center;
    }

    .close {
        float: right;
        font-size: 24px;
        cursor: pointer;
    }

    .form-group {
        margin-bottom: 15px;
        text-align: left;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            transition: border 0.3s;
        }

            .form-group input:focus,
            .form-group textarea:focus {
                border-color: #3498db;
            }

        .form-group textarea {
            resize: vertical;
        }

    .clientname {
        font-family: 'Poppins', sans-serif;
        font-size: 24px; 
        font-weight: 600; 
        color: #2c3e50; 
        letter-spacing: 1px; 
        text-transform: capitalize; 
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2); 
        margin-bottom: 10px; 
        transition: color 0.3s ease, text-shadow 0.3s ease; 
    }
        .clientname:hover {
            color: #3498db; 
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); 
        }

    .paragtask {
        font-family: 'Arial', sans-serif; 
        font-size: 20px; 
        font-weight: 600; 
        color: #34495e; 
        margin-bottom: 10px; 
        letter-spacing: 0.5px;
        text-transform: uppercase;
        text-align: left; 
    }

    .btn-danger {
        background: #e74c3c;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background 0.3s;
    }

        .btn-danger:hover {
            background: #c0392b;
        }

    .custom-alert {
        padding: 15px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        margin: 15px 0;
        transition: opacity 0.5s ease-in-out;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .logout-label, .notif-label, .request-label {
        font-size: 12px;
        font-style: italic;
        font-weight: bold;
        color: #7f8c8d;
        margin-right: 10px;
        text-align: center;
    }

    .logout-label {
        margin-top: 3px;
    }

    .notif-label {
        margin-top: 3px;
    }

    .request-label {
        margin-bottom: -8px;
    }

    .task-new {
        border-left: 5px solid #3498db; 
        background-color: #ecf8ff; 
        padding-left: 15px;
    }

    .status-new {
        color: #3498db;
        font-weight: bold;
        background-color: #d5e9f7; 
        padding: 2px 5px;
        border-radius: 5px;
    }

    .task-confirmed {
        background-color: #d4edda;
        border-left: 5px solid #28a745; 
    }

    .status-confirmed {
        color: #28a745;
        font-weight: bold;
        background-color: #d5f8e4; 
        padding: 2px 5px;
        border-radius: 5px;
    }

    .task-canceled {
        background-color: #f8d7da; 
        border-left: 5px solid #dc3545; 
    }

    .status-canceled {
        color: #dc3545;
        font-weight: bold;
        background-color: #f5c6cb; 
        padding: 2px 5px;
        border-radius: 5px;
    }

    .task-pending {
        background-color: #fff3cd;
        border-left: 5px solid #ffc107; 
    }

    .status-pending {
        color: #ffc107;
        font-weight: bold;
        background-color: #fff4b2; 
        padding: 2px 5px;
        border-radius: 5px;
    }

    .btn-restore {
        background: #28a745;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background 0.3s, transform 0.2s;
    }

        .btn-restore:hover {
            background: #218838; 
            transform: scale(1.05);
        }

    .btn-delete {
        background: orange; 
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background 0.3s, transform 0.2s;
    }

        .btn-delete:hover {
            background: #c0392b; 
            transform: scale(1.05);
        }

    .task-completed {
        background-color: #d4edda;
        border-left: 5px solid #28a745;
    }

    .status-completed {
        color: #28a745;
        font-weight: bold;
        background-color: #d5f8e4;
        padding: 2px 5px;
        border-radius: 5px;
    }

    .task-rejected {
        background-color: #f8d7da;
        border-left: 5px solid #dc3545;
    }

    .status-rejected {
        color: #dc3545;
        font-weight: bold;
        background-color: #f5c6cb;
        padding: 2px 5px;
        border-radius: 5px;
        }

    .task-progress{
        background-color: #fff3cd;
        border-left: 5px solid #ff9800;
    }

    .status-progress{
        color: #ff9800;
        font-weight: bold;
        background-color: #f5c6cb;
        padding: 2px 5px;
        border-radius: 5px;
    }


    .search-filters {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
        justify-content: space-between;
        align-items: center;
    }

    #taskNameSearch {
        padding: 8px;
        font-size: 14px;
        width: 250px;
        border: 1px solid #ddd;
        border-radius: 5px;
        transition: border 0.3s;
        background-color: #fff;
    }

        #taskNameSearch:focus {
            border-color: #3498db;
            outline: none;
        }

    #taskStatusSearch {
        padding: 8px;
        font-size: 14px;
        width: 200px;
        border: 1px solid #ddd;
        border-radius: 5px;
        transition: border 0.3s;
        background-color: #fff;
    }

        #taskStatusSearch:focus {
            border-color: #3498db;
            outline: none;
        }

    .search-btn {
        padding: 8px 15px;
        background: #3498db;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        transition: background 0.3s;
    }

        .search-btn:hover {
            background: #2980b9;
        }

    .task-scroll-container {
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 20px;
    }

    .task-list {
        list-style: none;
        padding: 0;
    }
</style>

<script>
    function openModal() {
        document.getElementById("taskModal").style.display = "flex";
    }

    function closeModal() {
        document.getElementById("taskModal").style.display = "none";
    }


    document.getElementById("uploadPic").addEventListener("change", function(event) {
        let file = event.target.files[0];

        if (file) {
            let formData = new FormData();
            formData.append("profilePhoto", file);

            fetch("/VolunProfile/UploadPhoto", {
                method: "POST",
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById("profilePic").src = data.imageUrl;
                } else {
                    alert("Error uploading photo");
                }
            })
            .catch(error => console.error("Error:", error));
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        setTimeout(function () {
            let alerts = document.querySelectorAll(".custom-alert");
            alerts.forEach(alert => {
                alert.style.transition = "opacity 0.5s";
                alert.style.opacity = "0";
                setTimeout(() => alert.remove(), 500); // Видалення після завершення анімації
            });
        }, 3000);
    });

      function filterTasks() {
        var taskNameSearch = document.getElementById("taskNameSearch").value.toLowerCase();
        var taskStatusSearch = document.getElementById("taskStatusSearch").value;
        var tasks = document.querySelectorAll(".task-item");

        tasks.forEach(function(task) {
            var taskName = task.getAttribute("data-name").toLowerCase();
            var taskStatus = task.getAttribute("data-status");

            var isNameMatch = taskName.includes(taskNameSearch);
            var isStatusMatch = taskStatus.includes(taskStatusSearch) || taskStatusSearch === "";

            if (isNameMatch && isStatusMatch) {
                task.style.display = "block";
            } else {
                task.style.display = "none";
            }
        });
    }
</script>
